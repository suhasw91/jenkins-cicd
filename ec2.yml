AWSTemplateFormatVersion: 2010-09-09
Description: This template can launch ec2 in bation host.

Parameters:
  EnvironmentName:
    Description: SDLC Environment Value e.g dev/qa/prod.
    Type: String

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.small
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  HttpdAccesstoCIDR:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.10.0/24

  PrivateSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.20.0/24

Mappings: 
  RegionMap:
    us-east-1:
      AMI: ami-0aeeebd8d2ab47354
    us-east-2:
      AMI: ami-0d8d212151031f51c
    us-west-1:
      AMI: ami-0b2ca94b5b49e0132
    us-west-2:
      AMI: ami-0800fc0fa715fdcfe

Resources: 
  PublicEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      SecurityGroupIds: 
        - !GetAtt "PublicSecurityGroup.GroupId"
      KeyName: !Ref KeyName 
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet
      
      UserData: 
        Fn::Base64:
          !Sub |     
             #!/bin/bash -ex
             yum update -y 
             yum install httpd -y 
             amazon-linux-extras install docker -y 
             amazon-linux-extras install ansible2 -y 
             yum install java-1.8.0-openjdk-devel -y
             curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo
             sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
             yum install jenkins -y
             systemctl start jenkins
             systemctl enable jenkins
             systemctl start docker
             systemctl enable docker
             systemctl start httpd
             systemctl enable httpd
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CICD server
    DependsOn: PublicSubnet

  PrivateEC2:
    Type: 'AWS::EC2::Instance'
    DependsOn: PrivateSubnet
    Properties:
      SecurityGroupIds: 
        - !GetAtt "PrivateSecurityGroup.GroupId"
      KeyName: !Ref KeyName 
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PrivateSubnet
     
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash -ex
            yum update -y 
            yum install httpd -y 
            amazon-linux-extras install docker -y 
            systemctl start httpd
            systemctl enable httpd
            systemctl start docker
            systemctl enable docker
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Prod-Server
    DependsOn: PrivateSubnet
  
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name 
          Value: !Sub ${EnvironmentName} Internet-Gateway

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PublicRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public RT

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRTAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRT

  PrivateRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private RT 
  
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
      RouteTableId: !Ref PrivateRT
  

  PrivateRTAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRT

  NAT:
   Type: 'AWS::EC2::NatGateway'
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIP
         - AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} nat-gateway
  EIP:
    DependsOn: PublicRT
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC

  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
  
  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation